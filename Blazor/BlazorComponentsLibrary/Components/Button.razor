@using Microsoft.AspNetCore.Components.Web

<button class="@GetButtonClass()" @attributes="AdditionalAttributes" @onclick="OnClick">
    @if (!string.IsNullOrEmpty(Icon))
    {
        <i class="@Icon" aria-hidden="true"></i>
    }
    @ChildContent
</button>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter] public ButtonType Type { get; set; } = ButtonType.Primary;
    [Parameter] public ButtonSize Size { get; set; } = ButtonSize.Medium;
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private string GetButtonClass()
    {
        var baseClass = "btn";
        var typeClass = Type switch
        {
            ButtonType.Primary => "btn-primary",
            ButtonType.Secondary => "btn-secondary",
            ButtonType.Success => "btn-success",
            ButtonType.Danger => "btn-danger",
            ButtonType.Warning => "btn-warning",
            ButtonType.Info => "btn-info",
            ButtonType.Light => "btn-light",
            ButtonType.Dark => "btn-dark",
            ButtonType.Link => "btn-link",
            _ => "btn-primary"
        };
        var sizeClass = Size switch
        {
            ButtonSize.Small => "btn-sm",
            ButtonSize.Medium => "",
            ButtonSize.Large => "btn-lg",
            _ => ""
        };
        var disabledClass = IsDisabled ? "disabled" : "";

        return $"{baseClass} {typeClass} {sizeClass} {disabledClass}".Trim();
    }

    public enum ButtonType
    {
        Primary,
        Secondary,
        Success,
        Danger,
        Warning,
        Info,
        Light,
        Dark,
        Link
    }

    public enum ButtonSize
    {
        Small,
        Medium,
        Large
    }
}
